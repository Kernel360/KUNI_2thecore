pipeline {
  agent any
  options { timestamps() }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          userRemoteConfigs: [[url: 'https://github.com/Kernel360/KUNI_2thecore_backend.git']],
          branches: [[name: '*/dev-Jenkins-test']]
        ])
      }
    }

    stage('Build & Push Images') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'dockerhub-cred',
                           usernameVariable: 'DOCKERHUB_USER',
                           passwordVariable: 'DOCKERHUB_TOKEN'),
          file(credentialsId: 'prod.env', variable: 'ENV_FILE')
        ]) {
          sh '''
            set -euo pipefail
            cd back

            # Secret file(ENV_FILE)을 워크스페이스 prod.env로 복사
            install -m600 "$ENV_FILE" prod.env

            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USER" --password-stdin
            docker info | grep -i '^ Username' || true

            docker build -f main-server/Dockerfile -t "$DOCKERHUB_USER/2thecore-server:main" .
            docker push "$DOCKERHUB_USER/2thecore-server:main"

            docker build -f hub-server/Dockerfile  -t "$DOCKERHUB_USER/2thecore-server:hub"  .
            docker push "$DOCKERHUB_USER/2thecore-server:hub"
          '''
        }
      }
    }

    stage('Deploy to EC2 via SSH') {
      steps {
        // Publish over SSH 플러그인의 파이프라인 스텝
        sshPublisher publishers: [
          sshPublisherDesc(
            configName: '2thecore-EC2',
            transfers: [
              sshTransfer(
                sourceFiles: 'back/prod.env',
                remoteDirectory: '/home/ubuntu/2thecore',
                execCommand: '''
set -xeuo pipefail

# 0) 전송된 파일 확인
test -s /home/ubuntu/2thecore/prod.env

# 1) 루트 경로 준비 및 파일 이동
sudo mkdir -p /opt/2thecore
sudo mv /home/ubuntu/2thecore/prod.env /opt/2thecore/prod.env
sudo chown ubuntu:ubuntu /opt/2thecore/prod.env
cd /opt/2thecore

# 2) 네트워크(있으면 재사용)
docker network create core-net >/dev/null 2>&1 || true
docker network connect core-net 2thecore-rabbitmq >/dev/null 2>&1 || true
docker network connect core-net 2thecore-redis    >/dev/null 2>&1 || true

# 3) 포트 점유 정리
free_port() {
  local PORT="$1"
  docker ps --format '{{.ID}} {{.Ports}}' | awk -v p=":${PORT}->" '$0 ~ p {print $1}' | xargs -r docker rm -f
}
docker rm -f hubserver mainserver >/dev/null 2>&1 || true
free_port 8082; free_port 8080

# 4) 최신 이미지 pull
docker pull docker.io/yeonjin529/2thecore-server:hub
docker pull docker.io/yeonjin529/2thecore-server:main

# 5) 컨테이너 실행(ENV 주입)
docker run -d --name hubserver \
  --network core-net \
  --env-file /opt/2thecore/prod.env \
  -p 8082:8082 --restart unless-stopped \
  docker.io/yeonjin529/2thecore-server:hub

docker run -d --name mainserver \
  --network core-net \
  -p 8080:8080 --restart unless-stopped \
  docker.io/yeonjin529/2thecore-server:main

# 6) 헬스 대기
for i in {1..30}; do
  hub=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8082/actuator/health || echo 000)
  main=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/actuator/health || echo 000)
  [ "$hub$main" = "200200" ] && echo "health OK" && break
  sleep 2
done

# 7) 상태 출력
docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
docker inspect hubserver --format '{{range .Config.Env}}{{println .}}{{end}}' \
 | egrep -o '^(HUB_SERVER_PORT|JWT_[^=]+|RABBITMQ_[^=]+|REDIS_[^=]+)=' | sort -u || true
'''
              )
            ],
            verbose: true,
            failOnError: true
          )
        ]
      }
    }
  }

  post {
    always { echo "Pipeline finished." }
  }
}