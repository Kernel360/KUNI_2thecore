pipeline {
  agent any
  options { timestamps() }

  environment {
    IMAGE_NAME = '2thecore-server'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          userRemoteConfigs: [[url: 'https://github.com/Kernel360/KUNI_2thecore_backend.git']],
          branches: [[name: '*/dev-Jenkins-test']]
        ])
      }
    }

    stage('Build & Push Images') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: 'docker-hub-token',
            usernameVariable: 'DOCKERHUB_USER',
            passwordVariable: 'DOCKERHUB_TOKEN'
          ),
          file(credentialsId: '2thecore-env', variable: 'ENV_FILE')
        ]) {
          script { env.DOCKER_USER = DOCKERHUB_USER }
          withEnv(["IMAGE_REPO=${DOCKERHUB_USER}/${IMAGE_NAME}"]) {
            sh '''
              set -euo pipefail
              cd back
              install -m600 "$ENV_FILE" prod.env
              echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USER" --password-stdin
              docker info | grep -i '^ Username' || true
              docker build -f main-server/Dockerfile -t "${IMAGE_REPO}:main" .
              docker push "${IMAGE_REPO}:main"
              docker build -f hub-server/Dockerfile  -t "${IMAGE_REPO}:hub"  .
              docker push "${IMAGE_REPO}:hub"
            '''
          }
        }
      }
    }

    stage('Deploy to EC2 via SSH') {
      steps {
        sh """
          set -euo pipefail

          DEPLOY_HOST=ec2-43-203-191-246.ap-northeast-2.compute.amazonaws.com
          SSH_KEY=/var/lib/jenkins/.ssh/server_key
          REMOTE_DIR=/home/ubuntu/2thecore

          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=accept-new ubuntu@"$DEPLOY_HOST" "mkdir -p $REMOTE_DIR"
          scp -i "$SSH_KEY" -o StrictHostKeyChecking=accept-new back/prod.env ubuntu@"$DEPLOY_HOST":"$REMOTE_DIR/prod.env"

          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=accept-new ubuntu@"$DEPLOY_HOST" <<'EOS'
set -xeuo pipefail
test -s /home/ubuntu/2thecore/prod.env
sudo mkdir -p /opt/2thecore
sudo mv /home/ubuntu/2thecore/prod.env /opt/2thecore/prod.env
sudo chown ubuntu:ubuntu /opt/2thecore/prod.env
cd /opt/2thecore
docker network create core-net >/dev/null 2>&1 || true
docker network connect core-net 2thecore-rabbitmq >/dev/null 2>&1 || true
docker network connect core-net 2thecore-redis    >/dev/null 2>&1 || true
free_port() { local PORT="\\$1"; docker ps --format '{{.ID}} {{.Ports}}' | awk -v p=":\\${PORT}->" '\\$0 ~ p {print \\$1}' | xargs -r docker rm -f; }
docker rm -f hubserver mainserver >/dev/null 2>&1 || true
free_port 8082; free_port 8080
docker pull docker.io/${DOCKER_USER}/${IMAGE_NAME}:hub
docker pull docker.io/${DOCKER_USER}/${IMAGE_NAME}:main
docker run -d --name hubserver --network core-net --env-file /opt/2thecore/prod.env -p 8082:8082 --restart unless-stopped docker.io/${DOCKER_USER}/${IMAGE_NAME}:hub
docker run -d --name mainserver --network core-net --env-file /opt/2thecore/prod.env -p 8080:8080 --restart unless-stopped docker.io/${DOCKER_USER}/${IMAGE_NAME}:main
for i in {1..30}; do
  hub=\\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8082/actuator/health || echo 000)
  main=\\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/actuator/health || echo 000)
  [ "\\$hub\\$main" = "200200" ] && echo "health OK" && break
  sleep 2
done
docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
EOS
        """
      }
    }
  }

  post {
    always { echo "Pipeline finished." }
  }
}